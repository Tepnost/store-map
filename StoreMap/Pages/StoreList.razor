@page "/stores"
@using StoreMap.Data.Dtos
@using StoreMap.Data.Enums
@using StoreMap.Extensions
@using StoreMap.Logic.Interfaces
@inject IStoreService storeService
@inject NavigationManager navigationManager
@inject ModalService ModalService
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (stores == null)
{
    <Spin size="large" />
    return;
}

<div class="store-list-container">
    <div class="store-list-controls">
        <SearchBar Placeholder="Search by name" OnSearch="Search"/>
        @if (IsAdminOrMod)
        {
            <AddStoreModal @ref="@addStoreModal" OnCreated="Edit"></AddStoreModal>
            <Button Class="store-list-add-btn" Type="primary" OnClick="@ShowModal">
                <Icon Type="plus"></Icon>
                Add Store
            </Button>
        }
    </div>

    <Table Class="store-list-table" Bordered DataSource="@stores" Context="listItem">
        <Column @bind-Field="@listItem.Name">
            <NavLink href="@($"stores/{listItem.Id}")">
                <span class="nav-text">@listItem.Name</span>
            </NavLink>
        </Column>
        @if (IsAdminOrMod)
        {
            <ActionColumn>
                <Space>
                    <SpaceItem>
                        <Button Class="store-list-edit-btn" OnClick="() => Edit(listItem.Id)">
                            Edit
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Popconfirm Title="@("Are you sure you want to delete this store?")"
                                    OnConfirm="() => Delete(listItem.Id)"
                                    OkText="Yes"
                                    CancelText="No">
                            <Button Danger Class="store-list-delete-btn">
                                Delete
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        }
    </Table>
</div>

<style>
.store-list-container {
    display: flex;
    flex-direction: column;
}
.store-list-add-btn {
    align-self: flex-end;
    margin-left: 10px;
}
.store-list-table {
    margin-top: 10px;
}
.store-list-controls {
    display: flex;
    justify-content: space-between;
}
</style>

@code {
    private List<StoreDto> stores;
    private AddStoreModal addStoreModal;
    private bool IsAdminOrMod { get; set; }

    private async Task Search(string searchTerm)
    {
        stores = await storeService.GetAllStores(searchTerm);
    }

    private void Edit(Guid id)
    {
        navigationManager.NavigateTo($"stores/{id}/edit");
    }

    private async Task Delete(Guid id)
    {
        var result = await storeService.DeleteStore(id);
        if (result) return;
        await Refresh();
    }

    private void ShowModal()
    {
        addStoreModal.Show();
    }

    private async Task Refresh()
    {
        stores = await storeService.GetAllStores();
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            IsAdminOrMod = authState.User.IsInRole(UserRole.AdminMod);
        }
        stores = await storeService.GetAllStores();
    }
    
}