@page "/stores/{id:guid}/edit"
@using StoreMap.Data.Dtos
@using StoreMap.Data.Enums
@using Microsoft.AspNetCore.Authorization
@using StoreMap.Data
@using StoreMap.Logic.Interfaces
@inject IStoreService storeService
@inject NavigationManager navigationManager;
@attribute [Authorize(Roles = Constants.AdminModRoles)]

@if (Store == null)
{
    <Spin size="large" />
    return;
}

<CascadingValue Value="this">
    <MapEdit />
    <Divider />
    <StoreItemList CanEdit="true" />
    
    <Button Class="save-store-btn" Type="primary" Size="large" Block @onclick="@Save" Disabled="@savingInProgress">
        @if (savingInProgress)
        {
            <Spin Size="small" />
        }
        else
        {
            @("Save")
        }
    </Button>
</CascadingValue>

@code {
    public StoreDto Store;
    public List<StoreItemExtendedDto> StoreItems { get; set; }
    public ShapeObjectAction MapAction = ShapeObjectAction.Create;
    private bool savingInProgress;

    [Parameter] public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Store = await storeService.GetStore(Id);
        if (Store == null)
        {
            navigationManager.NavigateTo("/stores");
            return;
        }
        
        StoreItems = GetStoreItems(Store);
    }

    private List<StoreItemExtendedDto> GetStoreItems(StoreDto store) =>
        store.StoreItems?.Select(x => new StoreItemExtendedDto(x)).ToList() 
        ?? new List<StoreItemExtendedDto>();

    public void Update()
    {
        Store.StoreItems = StoreItems.Cast<StoreItemDto>().ToList();
        InvokeAsync(StateHasChanged);
    }

    private async Task Save()
    {
        savingInProgress = true;
        
        Store.StoreItems = StoreItems.Select(x => new StoreItemDto(x)).ToList();
        var response = await storeService.SaveStore(Store);
        
        savingInProgress = false;
        
        if (response.Success)
        {
            navigationManager.NavigateTo("stores");
        }
    }
}
