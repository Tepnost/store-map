@using StoreMap.Data.Dtos
@using StoreMap.Data.Enums

<div class="store-item-list">
    <Table DataSource="@EditStore.StoreItems">
        <Column @bind-Field="@context.Name">
            @if (context.IsEditing)
            {
                <Input @bind-Value="@context.TempName" Placeholder="Item name"/>
            }
            else
            {
                <span>@context.Name</span>
            }
        </Column>
        <Column @bind-Field="@context.X"></Column>
        <Column @bind-Field="@context.Y"></Column>
        <ActionColumn>
            <Space>
                @if (context.IsEditing)
                {
                    <SpaceItem><Button Class="store-item-list-save-btn" OnClick="() => Save(context.Id)">Save</Button></SpaceItem>
                    <SpaceItem><Button Class="store-item-list-cancel-btn" OnClick="() => Cancel(context.Id)">Cancel</Button></SpaceItem>
                }
                else
                {
                    <SpaceItem><Button Class="store-item-list-edit-btn" OnClick="() => Edit(context.Id)">Edit</Button></SpaceItem>
                    <SpaceItem><Button Class="store-item-list-move-btn" OnClick="() => Move(context.Id)">Move</Button></SpaceItem>
                    <SpaceItem><Button Class="store-item-list-delete-btn" Danger OnClick="() => Delete(context.Id)">Delete</Button></SpaceItem>
                }
            </Space>
        </ActionColumn>
    </Table>
</div>

<style>
.store-item-list {
    display: flex;
    flex-direction: column;
}
</style>


@code{
    [CascadingParameter] public EditStore EditStore { get; set; }
    private StoreDto Store => EditStore.Store;

    private StoreItemExtendedDto GetItem(Guid id) => EditStore.StoreItems.First(x => x.Id == id);

    private void Delete(Guid id)
    {
        var index = EditStore.StoreItems.FindIndex(x => x.Id == id);
        if (index == -1)
        {
            return;
        }
        
        EditStore.StoreItems.RemoveAt(index);
        EditStore.Update();
    }

    private void Move(Guid id)
    {
        var item = GetItem(id);
        item.IsMoving = true;
        EditStore.MapAction = ShapeObjectAction.Move;
        EditStore.Update();
    }

    private void Edit(Guid id)
    {
        var item = GetItem(id);
        item.TempName = item.Name;
        item.IsEditing = true;
    }

    private void Save(Guid id)
    {
        var item = GetItem(id);
        item.Name = item.TempName;
        item.IsEditing = false;
    }

    private void Cancel(Guid id)
    {
        var item = GetItem(id);
        item.IsEditing = false;

        if (string.IsNullOrEmpty(item.Name))
        {
            Delete(id);
        }
    }

}
