@using StoreMap.Data.Dtos
@using StoreMap.Logic.ServiceContracts
@using StoreMap.Data.Enums
@using StoreMap.Data.Factory
@using StoreMap.Extensions
@inject IStoreService storeService
@inject IBrowserService browserService

<div class="map-edit-controls">
    <RadioGroup @bind-Value="@shapeType" size="large">
        <Radio RadioButton Value="@ShapeType.Rect">Rectangle</Radio>
        <Radio RadioButton Value="@ShapeType.Circle">Circle</Radio>
    </RadioGroup>
    <RadioGroup @bind-Value="@isCreate" size="large">
        <Radio RadioButton Value="@true">Create</Radio>
        <Radio RadioButton Value="@false">Delete</Radio>
    </RadioGroup>
    
    <Button Type="primary" @onclick="Save">Save</Button>
</div>

<MapView id="map-drawing"
         storeObjects="@storeObjects"
         @onclick="@HandleClick"
         @onmousemove="@UpdateDrawingShape">
    
    @if (drawShape != null)
    {
        <StoreShape data="@drawShape"></StoreShape>
    }
</MapView>

@code {
    private ICollection<StoreObjectDto> storeObjects = new List<StoreObjectDto>();
    private StoreObjectDto drawShape;
    private RectPosition mapPosition;
    private ShapeType shapeType = ShapeType.Rect;
    private bool isCreate = true;
    [Parameter] public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var store = await storeService.GetStore(Id);
        storeObjects = store.StoreObjects;
    }

    private async Task HandleClick(MouseEventArgs e)
    {
        mapPosition = await browserService.GetElementPosition("map-drawing");
        
        if (isCreate) StartDraw(e);
        else DeleteShape(e);
    }

    private void DeleteShape(MouseEventArgs e)
    {
        var objToDelete = storeObjects
            .FirstOrDefault(x => x.IsInside(e.GetXInDiv(mapPosition), e.GetYInDiv(mapPosition)));

        if (objToDelete != null)
        {
            storeObjects.Remove(objToDelete);
        }
    }

    private void StartDraw(MouseEventArgs e)
    {
        if (drawShape != null)
        {
            storeObjects.Add(drawShape);
            drawShape = null;
            return;
        }
        
        drawShape = ShapeFactory.CreateShape(
            shapeType, 
            e.GetXInDiv(mapPosition), 
            e.GetYInDiv(mapPosition));
        Console.WriteLine($"Starting drawing: {drawShape.X}:{drawShape.Y}");
    }

    private void UpdateDrawingShape(MouseEventArgs e)
    {
        drawShape?.UpdateSize(
            e.GetXInDiv(mapPosition), 
            e.GetYInDiv(mapPosition), 
            mapPosition);
    }

    private void Save()
    {
        
    }
}
