@using StoreMap.Data.Dtos
@using StoreMap.Logic.ServiceContracts
@using StoreMap.Data.Enums
@using StoreMap.Data.Factory
@using StoreMap.Extensions
@using System.Drawing
@inject IStoreService storeService
@inject IBrowserService browserService

<MapView id="map-drawing"
         Store="@Store"
         @onclick="@HandleClick"
         @onmousemove="@UpdateDrawingShape">
    
    @if (drawShape != null)
    {
        <StoreShape data="@drawShape"></StoreShape>
    }
</MapView>

<div class="map-edit-controls">
    <RadioGroup @bind-Value="@EditStore.MapAction" size="large">
        @if (EditStore.MapAction == ShapeObjectAction.Move)
        {
            <Radio RadioButton Value="@ShapeObjectAction.Create">Cancel</Radio>
        }
        else
        {
            <Radio RadioButton Value="@ShapeObjectAction.Create">Create</Radio>
            <Radio RadioButton Value="@ShapeObjectAction.Delete">Delete</Radio>
        }
    </RadioGroup>
    
    @if (EditStore.MapAction == ShapeObjectAction.Create)
    {
        // TODO: Color picker
        <div>
            <RadioGroup @bind-Value="@shopObjectType" size="large">
                <Radio RadioButton Value="@ShopObjectType.Rect">Rectangle</Radio>
                <Radio RadioButton Value="@ShopObjectType.Circle">Circle</Radio>
            </RadioGroup>
            <RadioGroup @bind-Value="@shopObjectType" size="large" ButtonStyle="solid">
                <Radio RadioButton Value="@ShopObjectType.Item">Add Item</Radio>
            </RadioGroup>
        </div>
    }
</div>

<style>
.map-edit-controls {
    margin-top: 10px;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
}
</style>

@code {
    [Parameter] public StoreDto Store { get; set; }
    [CascadingParameter] EditStore EditStore { get; set; }
    private StoreObjectDto drawShape;
    private RectPosition mapPosition;
    private ShopObjectType shopObjectType = ShopObjectType.Rect;

    private async Task HandleClick(MouseEventArgs e)
    {
        mapPosition = await browserService.GetElementPosition("map-drawing");

        switch (EditStore.MapAction)
        {
            case ShapeObjectAction.Create:
                StartDraw(e);
                break;
            case ShapeObjectAction.Delete:
                DeleteShape(e);
                break;
            default:
                MoveStoreItem(e);
                break;
        }
    }

    private void DeleteShape(MouseEventArgs e)
    {
        var objToDelete = Store.StoreObjects
            .FirstOrDefault(x => x.IsInside(e.GetXInDiv(mapPosition), e.GetYInDiv(mapPosition)));

        if (objToDelete != null)
        {
            Store.StoreObjects.Remove(objToDelete);
        }
    }

    private void StartDraw(MouseEventArgs e)
    {
        if (drawShape != null)
        {
            Store.StoreObjects.Add(drawShape);
            drawShape = null;
            return;
        }

        if (shopObjectType == ShopObjectType.Item)
        {
            CreateStoreItem(e);
            return;
        }
        
        drawShape = ShapeFactory.CreateShape(
            shopObjectType, 
            e.GetXInDiv(mapPosition), 
            e.GetYInDiv(mapPosition));
        Console.WriteLine($"Starting drawing: {drawShape.X}:{drawShape.Y}");
    }

    private void MoveStoreItem(MouseEventArgs e)
    {
        var item = Store.StoreItems.FirstOrDefault(x => x.IsMoving);
        if (item == null)
        {
            return;
        }
        
        item.X = e.GetXInDiv(mapPosition);
        item.Y = e.GetYInDiv(mapPosition);
        item.IsMoving = false;

        EditStore.MapAction = ShapeObjectAction.Create;
        EditStore.Update();
    }

    private void CreateStoreItem(MouseEventArgs e)
    {
        Store.StoreItems.Insert(0, new StoreItemExtendedDto
        {
            Id = Guid.NewGuid(),
            X = e.GetXInDiv(mapPosition),
            Y = e.GetYInDiv(mapPosition),
            IsEditing = true
        });
            
        EditStore.Update();
    }

    private void UpdateDrawingShape(MouseEventArgs e)
    {
        drawShape?.UpdateSize(
            e.GetXInDiv(mapPosition), 
            e.GetYInDiv(mapPosition), 
            mapPosition);
    }
}
